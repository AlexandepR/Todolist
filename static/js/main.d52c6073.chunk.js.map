{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","error","setError","newValue","setNewValue","buttonGradient","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","useStyles","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","ctrlKey","addItem","helperText","Button","onClick","trim","className","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Todolist","changeTodoListTitle","tlId","IconButton","removeTodoList","Delete","addTask","taska","map","t","key","id","Checkbox","checked","isDone","changeChecked","changeTaskTitle","delTask","arial-label","filterTasks","changeTask","App","newTask","v1","todoListTask","tasksObj","newTodo","setTasks","find","findTodolist","todoLists","tl","filter","setTodoLists","filterTask","todoList1","todoList2","filterTodoList","newTitle","newTodolist","Container","fixed","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Grid","container","style","todolist","spacing","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d52c6073.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, makeStyles, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (value: string) => void\r\n    // tlId: string\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n    let [error, setError] = useState<null | string>(null)\r\n    let [newValue, setNewValue] = useState('')\r\n\r\n    const onChangeHadler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13 && e.ctrlKey) {\r\n            props.addItem(newValue);\r\n            setNewValue('')\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newValue === '') {\r\n            setError('Enter information')\r\n            return;\r\n        }\r\n        props.addItem(newValue.trim());\r\n        setNewValue('')\r\n    }\r\n\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            background: 'linear-gradient(45deg, #0031ce 30%, #356aff 90%)',\r\n            border: 0,\r\n            borderRadius: 3,\r\n            boxShadow: '0 3px 5px 2px rgba(0, 85, 206, .5)',\r\n            color: 'white',\r\n            height: 35,\r\n            padding: '0px 30px',\r\n        },\r\n    });\r\n    const buttonGradient = useStyles();\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<input*/}\r\n            {/*    className={error ? 'error' : ''}*/}\r\n            {/*    value={newValue}*/}\r\n            {/*    onChange={onChangeHadler}*/}\r\n            {/*    onKeyPress={onKeyPressHandler}*/}\r\n            {/*/>*/}\r\n            <TextField\r\n                variant={'outlined'}\r\n                label={'Type value'}\r\n                // className={error ? 'error' : ''}\r\n                value={newValue}\r\n                onChange={onChangeHadler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n\r\n\r\n            <Button onClick={addTask} className={buttonGradient.root}>Add</Button>\r\n\r\n            {/*<IconButton onClick={addTask}*/}\r\n            {/*            color={'primary'}*/}\r\n            {/*><ControlPoint/>*/}\r\n            {/*</IconButton>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////Task 7\r\n// import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n// import {Button, IconButton, makeStyles, TextField} from \"@material-ui/core\";\r\n// import {ControlPoint} from \"@material-ui/icons\";\r\n//\r\n// type AddItemFormType = {\r\n//     addItem: (value: string) => void\r\n//     // tlId: string\r\n// }\r\n//\r\n// export function AddItemForm(props: AddItemFormType) {\r\n//     let [error, setError] = useState<null | string>(null)\r\n//     let [newValue, setNewValue] = useState('')\r\n//\r\n//     const onChangeHadler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         setNewValue(e.currentTarget.value)\r\n//         setError(null)\r\n//     }\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         setError(null);\r\n//         if (e.charCode === 13 && e.ctrlKey) {\r\n//             props.addItem(newValue);\r\n//             setNewValue('')\r\n//         }\r\n//     }\r\n//     const addTask = () => {\r\n//         if (newValue === '') {\r\n//             setError('Enter information')\r\n//             return;\r\n//         }\r\n//         props.addItem(newValue.trim());\r\n//         setNewValue('')\r\n//     }\r\n//\r\n//\r\n//     const useStyles = makeStyles({\r\n//         root: {\r\n//             background: 'linear-gradient(45deg, #0031ce 30%, #356aff 90%)',\r\n//             border: 0,\r\n//             borderRadius: 3,\r\n//             boxShadow: '0 3px 5px 2px rgba(0, 85, 206, .5)',\r\n//             color: 'white',\r\n//             height: 35,\r\n//             padding: '0px 30px',\r\n//         },\r\n//     });\r\n//     const buttonGradient = useStyles();\r\n//\r\n//\r\n//     return (\r\n//         <div>\r\n//             {/*<input*/}\r\n//             {/*    className={error ? 'error' : ''}*/}\r\n//             {/*    value={newValue}*/}\r\n//             {/*    onChange={onChangeHadler}*/}\r\n//             {/*    onKeyPress={onKeyPressHandler}*/}\r\n//             {/*/>*/}\r\n//             <TextField\r\n//                 variant={'outlined'}\r\n//                 label={'Type value'}\r\n//                 // className={error ? 'error' : ''}\r\n//                 value={newValue}\r\n//                 onChange={onChangeHadler}\r\n//                 onKeyPress={onKeyPressHandler}\r\n//                 error={!!error}\r\n//                 helperText={error}\r\n//             />\r\n//\r\n//\r\n//             <Button onClick={addTask} className={buttonGradient.root}>Add</Button>\r\n//\r\n//             {/*<IconButton onClick={addTask}*/}\r\n//             {/*            color={'primary'}*/}\r\n//             {/*><ControlPoint/>*/}\r\n//             {/*</IconButton>*/}\r\n//\r\n//         </div>\r\n//     )\r\n// }","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    }\r\n    const onChageTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={onChageTitleHandler}\r\n                onBlur={activateViewMode}\r\n                value={title}\r\n                autoFocus/>\r\n            : <span\r\n                onDoubleClick={activateEditMode}\r\n\r\n            >--{props.title}--</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilteredTask, TodoListsType} from \"./App\";\r\nimport './App.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TypeProps = {\r\n    title: string\r\n    taska: TasksArr[]\r\n    delTask: (id: string, tlId: string) => void\r\n    changeTask: (value: FilteredTask, todoListId: string) => void\r\n    addTask: (value: string, tlId: string) => void\r\n    changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n    changeTaskTitle: (id: string, newTitle:string, tlId: string) => void\r\n    filterTasks: FilteredTask\r\n    tlId: string\r\n    removeTodoList: (tlId:string) => void\r\n    changeTodoListTitle: (tlId:string, title:string) => void\r\n}\r\nexport type TasksArr = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\nexport function Todolist(props: TypeProps) {\r\n\r\n    const onAllHandler = () => {\r\n        props.changeTask('All', props.tlId)\r\n    }\r\n    const onCompletedHandler = () => {\r\n        props.changeTask('Completed', props.tlId)\r\n    }\r\n    const onActiveHandler = () => {\r\n        props.changeTask('Active', props.tlId)\r\n    }\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.tlId)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.tlId)\r\n    }\r\n    const changeTodoListTitle = (title:string) => {\r\n        props.changeTodoListTitle(props.tlId, title)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n\r\n                <h3><EditableSpan\r\n                    title={props.title}\r\n                    onChange={changeTodoListTitle}/>\r\n                    <IconButton onClick={removeTodoList}><Delete /></IconButton></h3>\r\n                <AddItemForm addItem={addTask}\r\n                    // tlId={props.tlId}\r\n                />\r\n            </div>\r\n\r\n            <ul>\r\n                {\r\n                    props.taska.map(t => {\r\n                        const onChangeTitleHandler = (newValue:string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.tlId)\r\n                        }\r\n                        return (     <li key={t.id}>\r\n                            <Checkbox\r\n                                // type='checkbox'\r\n                                checked={t.isDone}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n                                    props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n                                }\r\n                                }\r\n                            />\r\n                            <EditableSpan\r\n                                title={t.title}\r\n                                onChange={onChangeTitleHandler}\r\n                            ></EditableSpan>\r\n\r\n                            <IconButton onClick ={() => {\r\n                                props.delTask(t.id, props.tlId)\r\n                            }}arial-label='delete'><Delete /></IconButton>\r\n                        </li>)\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filterTasks === 'All' ? 'contained' : 'text'}\r\n                    // className={props.filterTasks === 'All' ? 'active-filter' : ''}\r\n                    onClick={onAllHandler}>All\r\n                </Button>\r\n                <Button\r\n                    color={'primary'}\r\n                    // className={props.filterTasks === 'Completed' ? 'active-filter' : ''}\r\n                    variant={props.filterTasks === 'Completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedHandler}>Complete\r\n                </Button>\r\n                <Button\r\n                    color={'secondary'}\r\n                    // className={props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n                    variant={props.filterTasks === 'Active' ? 'contained' : 'text'}\r\n                    onClick={\r\n                        onActiveHandler\r\n                    }>Active\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////Todolist 8\r\n// import React, {ChangeEvent} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n// import {EditableSpan} from \"./EditableSpan\";\r\n// import {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\n// import {Delete} from \"@material-ui/icons\";\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string, tlId: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (value: string, tlId: string) => void\r\n//     changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n//     changeTaskTitle: (id: string, newTitle:string, tlId: string) => void\r\n//     filterTasks: FilteredTask\r\n//     tlId: string\r\n//     removeTodoList: (tlId:string) => void\r\n//     changeTodoListTitle: (tlId:string, title:string) => void\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//\r\n//     const onAllHandler = () => {\r\n//         props.changeTask('All', props.tlId)\r\n//     }\r\n//     const onCompletedHandler = () => {\r\n//         props.changeTask('Completed', props.tlId)\r\n//     }\r\n//     const onActiveHandler = () => {\r\n//         props.changeTask('Active', props.tlId)\r\n//     }\r\n//     const removeTodoList = () => {\r\n//         props.removeTodoList(props.tlId)\r\n//     }\r\n//     const addTask = (title: string) => {\r\n//         props.addTask(title, props.tlId)\r\n//     }\r\n//     const changeTodoListTitle = (title:string) => {\r\n//         props.changeTodoListTitle(props.tlId, title)\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//\r\n//                 <h3><EditableSpan\r\n//                     title={props.title}\r\n//                     onChange={changeTodoListTitle}/>\r\n//                     <IconButton onClick={removeTodoList}><Delete /></IconButton></h3>\r\n//                 <AddItemForm addItem={addTask}\r\n//                     // tlId={props.tlId}\r\n//                 />\r\n//             </div>\r\n//\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t => {\r\n//                         const onChangeTitleHandler = (newValue:string) => {\r\n//                             props.changeTaskTitle(t.id, newValue, props.tlId)\r\n//                         }\r\n//                         return (     <li key={t.id}>\r\n//                             <Checkbox\r\n//                                 // type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n//                                 }\r\n//                                 }\r\n//                             />\r\n//                             <EditableSpan\r\n//                                 title={t.title}\r\n//                                 onChange={onChangeTitleHandler}\r\n//                             ></EditableSpan>\r\n//\r\n//                             <IconButton onClick ={() => {\r\n//                                 props.delTask(t.id, props.tlId)\r\n//                             }}arial-label='delete'><Delete /></IconButton>\r\n//                         </li>)\r\n//                     })\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <Button\r\n//                     variant={props.filterTasks === 'All' ? 'contained' : 'text'}\r\n//                     // className={props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={onAllHandler}>All\r\n//                 </Button>\r\n//                 <Button\r\n//                     color={'primary'}\r\n//                     // className={props.filterTasks === 'Completed' ? 'active-filter' : ''}\r\n//                     variant={props.filterTasks === 'Completed' ? 'contained' : 'text'}\r\n//                     onClick={onCompletedHandler}>Complete\r\n//                 </Button>\r\n//                 <Button\r\n//                     color={'secondary'}\r\n//                     // className={props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     variant={props.filterTasks === 'Active' ? 'contained' : 'text'}\r\n//                     onClick={\r\n//                         onActiveHandler\r\n//                     }>Active\r\n//                 </Button>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////Task 7\r\n// import React, {ChangeEvent} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n// import {EditableSpan} from \"./EditableSpan\";\r\n// import {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\n// import {Delete} from \"@material-ui/icons\";\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string, tlId: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (value: string, tlId: string) => void\r\n//     changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n//     changeTaskTitle: (id: string, newTitle:string, tlId: string) => void\r\n//     filterTasks: FilteredTask\r\n//     tlId: string\r\n//     removeTodoList: (tlId:string) => void\r\n//     changeTodoListTitle: (tlId:string, title:string) => void\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//\r\n//     const onAllHandler = () => {\r\n//         props.changeTask('All', props.tlId)\r\n//     }\r\n//     const onCompletedHandler = () => {\r\n//         props.changeTask('Completed', props.tlId)\r\n//     }\r\n//     const onActiveHandler = () => {\r\n//         props.changeTask('Active', props.tlId)\r\n//     }\r\n//     const removeTodoList = () => {\r\n//         props.removeTodoList(props.tlId)\r\n//     }\r\n//     const addTask = (title: string) => {\r\n//         props.addTask(title, props.tlId)\r\n//     }\r\n//     const changeTodoListTitle = (title:string) => {\r\n//         props.changeTodoListTitle(props.tlId, title)\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//\r\n//                 <h3><EditableSpan\r\n//                     title={props.title}\r\n//                     onChange={changeTodoListTitle}/>\r\n//                     <IconButton onClick={removeTodoList}><Delete /></IconButton></h3>\r\n//                 <AddItemForm addItem={addTask}\r\n//                     // tlId={props.tlId}\r\n//                 />\r\n//             </div>\r\n//\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t => {\r\n//                         const onChangeTitleHandler = (newValue:string) => {\r\n//                             props.changeTaskTitle(t.id, newValue, props.tlId)\r\n//                         }\r\n//                         return (     <li key={t.id}>\r\n//                             <Checkbox\r\n//                                 // type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n//                                 }\r\n//                                 }\r\n//                             />\r\n//                             <EditableSpan\r\n//                                 title={t.title}\r\n//                                 onChange={onChangeTitleHandler}\r\n//                             ></EditableSpan>\r\n//\r\n//                             <IconButton onClick ={() => {\r\n//                                 props.delTask(t.id, props.tlId)\r\n//                             }}arial-label='delete'><Delete /></IconButton>\r\n//                         </li>)\r\n//                     })\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <Button\r\n//                     variant={props.filterTasks === 'All' ? 'contained' : 'text'}\r\n//                     // className={props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={onAllHandler}>All\r\n//                 </Button>\r\n//                 <Button\r\n//                     color={'primary'}\r\n//                     // className={props.filterTasks === 'Completed' ? 'active-filter' : ''}\r\n//                     variant={props.filterTasks === 'Completed' ? 'contained' : 'text'}\r\n//                     onClick={onCompletedHandler}>Complete\r\n//                 </Button>\r\n//                 <Button\r\n//                     color={'secondary'}\r\n//                     // className={props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     variant={props.filterTasks === 'Active' ? 'contained' : 'text'}\r\n//                     onClick={\r\n//                         onActiveHandler\r\n//                     }>Active\r\n//                 </Button>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////Task 6 30 min\r\n// import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string, tlId: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (value: string, tlId: string) => void\r\n//     changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n//     filterTasks: FilteredTask\r\n//     tlId: string\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//\r\n//     const onAllHandler = () => {\r\n//         props.changeTask('All', props.tlId)\r\n//     }\r\n//     const onCompletedHandler = () => {\r\n//         props.changeTask('Completed', props.tlId)\r\n//     }\r\n//     const onActiveHandler = () => {\r\n//         props.changeTask('Active', props.tlId)\r\n//     }\r\n//\r\n//     const addTask = (title: string) => {\r\n//         debugger\r\n//         props.addTask(title, props.tlId);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div>\r\n//                 <h3>{props.title}</h3>\r\n//             <AddItemForm addItem={addTask}/>\r\n//\r\n//\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t =>\r\n//                         <li key={t.id}>\r\n//                             <input\r\n//                                 type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n//                                 }\r\n//                                 }\r\n//                             />\r\n//                             <span>{t.title}</span>\r\n//                             <button onClick={() => {\r\n//                                 props.delTask(t.id, props.tlId)\r\n//                             }}>del\r\n//                             </button>\r\n//                         </li>)\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <button\r\n//                     className={props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onAllHandler\r\n//                     }>All\r\n//                 </button>\r\n//                 <button\r\n//                     className={props.filterTasks === 'Completed' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onCompletedHandler\r\n//                     }>Complete\r\n//                 </button>\r\n//                 <button\r\n//                     className={props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onActiveHandler\r\n//                     }>Active\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n// type addItemFormtype = {\r\n//         addTask: (newValue: string, tlId: string) => void\r\n//         tlId: string\r\n// }\r\n\r\n// function AddItemForm (props: addItemFormtype) {\r\n//     let [newValue, setNewValue] = useState('')\r\n//     let [error, setError] = useState<null | string>(null)\r\n//\r\n//     const onChangeHadler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         setNewValue(e.currentTarget.value)\r\n//         setError(null)\r\n//     }\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         setError(null);\r\n//         if (e.charCode === 13 && e.ctrlKey) {\r\n//             props.addTask(newValue, props.tlId);\r\n//             setNewValue('')\r\n//         }\r\n//     }\r\n//     const addTask = () => {\r\n//         if (newValue === '') {\r\n//             setError('Enter information')\r\n//             return;\r\n//         }\r\n//         props.addTask(newValue.trim(), props.tlId);\r\n//         setNewValue('')\r\n//     }\r\n//\r\n//         return (\r\n//     <div>\r\n//         <input\r\n//             className={error ? 'error' : ''}\r\n//             value={newValue}\r\n//             onChange={onChangeHadler}\r\n//             onKeyPress={onKeyPressHandler}\r\n//         />\r\n//         <button onClick={addTask}>Add\r\n//         </button>\r\n//         {error && <div className='error-message'>{error}</div>}\r\n//     </div>\r\n//         )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////// TASK 6\r\n// import React, {ChangeEvent} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n// import {EditableSpan} from \"./EditableSpan\";\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksType[]\r\n//     delTask: (id: string, tlId: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (title: string, tlId: string) => void\r\n//     changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n//     changeCheckedTitle: (id: string, newtTitle: string, tlId: string) => void\r\n//     removeTodoList: (id:string) => void\r\n//     changeTodoListTitle: (id:string, newTitle: string) => void\r\n//     filterTasks: FilteredTask\r\n//     tlId: string\r\n// }\r\n// export type TasksType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//     const onAllHandler = () => {\r\n//         props.changeTask('All', props.tlId)\r\n//     }\r\n//     const onCompletedHandler = () => {\r\n//         props.changeTask('Completed', props.tlId)\r\n//     }\r\n//     const onActiveHandler = () => {\r\n//         props.changeTask('Active', props.tlId)\r\n//     }\r\n//     const addTask = (title: string) => {\r\n//         props.addTask(title, props.tlId)\r\n//     }\r\n//\r\n//     const removeTodoList = () => {\r\n//         props.removeTodoList(props.tlId)\r\n//     }\r\n//\r\n//     const changeTodolistTitle = (newTitle:string) => {\r\n//         props.changeTodoListTitle(props.tlId, newTitle);\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//\r\n//             <h3>\r\n//                 <button onClick={removeTodoList}>x</button>\r\n//                 <EditableSpan title={props.title} onChange={ changeTodolistTitle }/>\r\n//             </h3>\r\n//             <AddItemForm addItem={addTask}/>\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t => {\r\n//                         const onClickStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//                             props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n//                         }\r\n//                         const onChangeTitleHandler = (newValue: string) => {\r\n//                             props.changeCheckedTitle(t.id, newValue, props.tlId)}\r\n//\r\n//                         const onClickHandler = () => {\r\n//                             props.delTask(t.id, props.tlId)\r\n//                         }\r\n//\r\n//\r\n//                         return (<li key={t.id}>\r\n//                             <input\r\n//                                 type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={ onClickStatusHandler }\r\n//                             />\r\n//                             {/*<span>{t.title} ---- </span>*/}\r\n//                             <EditableSpan title={t.title}\r\n//                                           onChange={ onChangeTitleHandler }/>\r\n//                             <button onClick={ onClickHandler }>del\r\n//                             </button>\r\n//                         </li>)\r\n//                     })\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <button\r\n//                     className={props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onAllHandler\r\n//                     }>All\r\n//                 </button>\r\n//                 <button\r\n//                     className={props.filterTasks === 'Completed' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onCompletedHandler\r\n//                     }>Complete\r\n//                 </button>\r\n//                 <button\r\n//                     className={props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onActiveHandler\r\n//                     }>Active\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////// Task 5 refactor\r\n// import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string, tlId: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (value: string, tlId: string) => void\r\n//     changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n//     filterTasks: FilteredTask\r\n//     tlId: string\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//     let [newValue, setNewValue] = useState('')\r\n//     let [error, setError] = useState<null | string>(null)\r\n//\r\n//     const addTask = () => {\r\n//         if (newValue === '') {\r\n//             setError('Enter information')\r\n//             return;\r\n//         }\r\n//         props.addTask(newValue.trim(), props.tlId);\r\n//         setNewValue('')\r\n//     }\r\n//     const onChangeHadler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         setNewValue(e.currentTarget.value)\r\n//         setError(null)\r\n//     }\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         setError(null);\r\n//         if (e.charCode === 13 && e.ctrlKey) {\r\n//             props.addTask(newValue, props.tlId);\r\n//             setNewValue('')\r\n//         }\r\n//     }\r\n//\r\n//     const onAllHandler = () => {\r\n//         props.changeTask('All', props.tlId)\r\n//     }\r\n//     const onCompletedHandler = () => {\r\n//         props.changeTask('Completed', props.tlId)\r\n//     }\r\n//     const onActiveHandler = () => {\r\n//         props.changeTask('Active', props.tlId)\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//                 <h3>{props.title}</h3>\r\n//                 <div>\r\n//                     <input\r\n//                         className={error ? 'error' : ''}\r\n//                         value={newValue}\r\n//                         onChange={onChangeHadler}\r\n//                         onKeyPress={onKeyPressHandler}\r\n//                     />\r\n//                     <button onClick={addTask}>Add\r\n//                     </button>\r\n//                     {error && <div className='error-message'>{error}</div>}\r\n//                 </div>\r\n//             </div>\r\n//\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t =>\r\n//                         <li key={t.id}>\r\n//                             <input\r\n//                                 type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n//                                 }\r\n//                                 }\r\n//                             />\r\n//                             <span>{t.title}</span>\r\n//                             <button onClick={() => {\r\n//                                 props.delTask(t.id, props.tlId)\r\n//                             }}>del\r\n//                             </button>\r\n//                         </li>)\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <button\r\n//                     className={props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onAllHandler\r\n//                     }>All\r\n//                 </button>\r\n//                 <button\r\n//                     className={props.filterTasks === 'Completed' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onCompletedHandler\r\n//                     }>Complete\r\n//                 </button>\r\n//                 <button\r\n//                     className={props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     onClick={\r\n//                         onActiveHandler\r\n//                     }>Active\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n\r\n\r\n/////////////////////////////////////////////////Task 5\r\n// React, {ChangeEvent, useState} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string, tlId: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (value: string, tlId: string) => void\r\n//     changeChecked: (id: string, isDone: boolean, tlId: string) => void\r\n//     filterTasks: FilteredTask\r\n//     tlId: string\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n//\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//     let [newValue, setNewValue] = useState('')\r\n//     let [error, setError] = useState<null | string>(null)\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//                 <h3>{props.title}</h3>\r\n//                 <input\r\n//                     className={ error ? 'error' : ''}\r\n//                     value={newValue}\r\n//                     onChange={(e) => {\r\n//                         setNewValue(e.currentTarget.value)\r\n//                         setError(null)\r\n//                     }}\r\n//                     onKeyPress={(e) => {\r\n//                         if (e.charCode === 13 && e.ctrlKey) {\r\n//                             props.addTask(newValue, props.tlId);\r\n//                             setNewValue('')\r\n//                         }\r\n//                     }}\r\n//                 />\r\n//                 <button onClick={() => {\r\n//                     if (newValue === '') {\r\n//                         setError('Enter information')\r\n//                         return;\r\n//                     }\r\n//                     props.addTask(newValue.trim(), props.tlId);\r\n//                     setNewValue('')\r\n//                 }\r\n//                 }>Add\r\n//                 </button>\r\n//                 {error && <div className='error-message'>{error}</div>}\r\n//             </div>\r\n//\r\n//\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t =>\r\n//                         <li key={t.id}>\r\n//                             <input\r\n//                                 type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked, props.tlId)\r\n//                                 }\r\n//                                 }\r\n//\r\n//\r\n//                             />\r\n//                             <span>{t.title}</span>\r\n//                             <button onClick={() => {\r\n//                                 props.delTask(t.id, props.tlId)\r\n//                             }}>del\r\n//                             </button>\r\n//                         </li>)\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={() => {\r\n//                         props.changeTask('All', props.tlId)\r\n//                     }}>All\r\n//                 </button>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'Completed' ? 'active-filter' : '' }\r\n//                     onClick={() => {\r\n//                         props.changeTask('Completed', props.tlId)\r\n//                     }}>Complete\r\n//                 </button>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     onClick={() => {\r\n//                         props.changeTask('Active', props.tlId)\r\n//                     }}>Active\r\n//                 </button>\r\n//             </div>\r\n//\r\n//         </div>\r\n\r\n\r\n// import React, {ChangeEvent, useState} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string) => void\r\n//     changeTask: (value: FilteredTask, todoListId: string) => void\r\n//     addTask: (value: string) => void\r\n//     changeChecked: (id: string, isDone: boolean) => void\r\n//     filterTasks: FilteredTask\r\n//     id: string\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n// export function Todolist(props: TypeProps) {\r\n//     let [newValue, setNewValue] = useState('')\r\n//     let [error, setError] = useState<null | string>(null)\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//                 <h3>{props.title}</h3>\r\n//                 <input\r\n//                     className={ error ? 'error' : ''}\r\n//                     value={newValue}\r\n//                     onChange={(e) => {\r\n//                         setNewValue(e.currentTarget.value)\r\n//                         setError(null)\r\n//                     }}\r\n//                     onKeyPress={(e) => {\r\n//                         if (e.charCode === 13 && e.ctrlKey) {\r\n//                             props.addTask(newValue);\r\n//                             setNewValue('')\r\n//                         }}}\r\n//                 />\r\n//                 <button onClick={() => {\r\n//                     if (newValue === '') {\r\n//                         setError('Enter information')\r\n//                         return;\r\n//                     }\r\n//                     props.addTask(newValue.trim());\r\n//                     setNewValue('')\r\n//                 }\r\n//                 }>Add\r\n//                 </button>\r\n//                 {error && <div className='error-message'>{error}</div>}\r\n//             </div>\r\n//\r\n//             <ul>\r\n//                 {props.taska.map(t =>\r\n//                         <li key={t.id}>\r\n//                             <input\r\n//                                 type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked)}}\r\n//                             />\r\n//                             <span>{t.title}</span>\r\n//                             <button onClick={() => {\r\n//                                 props.delTask(t.id)\r\n//                             }}>del\r\n//                             </button>\r\n//                         </li>)}\r\n//             </ul>\r\n//             <div>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={() => {\r\n//                         props.changeTask('All', props.id)\r\n//                     }}>All\r\n//                 </button>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'Complete' ? 'active-filter' : '' }\r\n//                     onClick={() => {\r\n//                         props.changeTask('Complete', props.id)\r\n//                     }}>Complete\r\n//                 </button>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     onClick={() => {\r\n//                         props.changeTask('Active', props.id)\r\n//                     }}>Active\r\n//                 </button>\r\n//             </div>\r\n//\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n// (e) => {\r\n//                         setNewValue(e.currentTarget.value)\r\n//                         setError(null)\r\n//\r\n//\r\n// const addChangeFilterAll = () => props.changeFilter('All')\r\n// const addChangeFilterActive = () => props.changeFilter('Active')\r\n// const addChangeFilterCompleted = () => props.changeFilter('Completed')\r\n//\r\n// return (\r\n//     <div>\r\n//         <h3> {props.task[0].title}</h3>\r\n//         <input value={newTaskTitle}\r\n//                onChange={onChangeValue}\r\n//                onKeyPress = {onKeyPressValue}\r\n//         />\r\n//         <button onClick={addTask}>+</button>\r\n//\r\n//         <div>\r\n//             <ul>\r\n//                 {\r\n//                     props.task.map( t => {\r\n//                         const onRemoveHandler = () => {props.removeTask(t.id)}\r\n//                         return <li key={t.id}>\r\n//                             <input type='checkbox' checked={t.isDone}/>\r\n//                             <span>{t.title}</span>\r\n//                             <button onClick={onRemoveHandler}>x</button>\r\n//                         </li>\r\n//                     })\r\n//                 }\r\n//             </ul>\r\n//             <button onClick={addChangeFilterAll}>All</button>\r\n//             <button onClick={addChangeFilterActive}>Completed</button>\r\n//             <button onClick={addChangeFilterCompleted}>Active</button>\r\n//\r\n//\r\n// ///////////////////////////////////////////////////////Task 4\r\n// import React, {ChangeEvent, useState} from \"react\";\r\n// import {FilteredTask} from \"./App\";\r\n// import './App.css'\r\n//\r\n// type TypeProps = {\r\n//     title: string\r\n//     taska: TasksArr[]\r\n//     delTask: (id: string) => void\r\n//     changeTask: (value: FilteredTask) => void\r\n//     addTask: (value: string) => void\r\n//     changeChecked: (id: string, isDone: boolean) => void\r\n//     filterTasks: FilteredTask\r\n// }\r\n// export type TasksArr = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n//\r\n//\r\n// export function Todolist(props: TypeProps) {\r\n//     let [newValue, setNewValue] = useState('')\r\n//     let [error, setError] = useState<null | string>(null)\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//                 <h3>{props.title}</h3>\r\n//                 <input\r\n//                     className={ error ? 'error' : ''}\r\n//                     value={newValue}\r\n//                     onChange={(e) => {\r\n//                         setNewValue(e.currentTarget.value)\r\n//                         setError(null)\r\n//                     }}\r\n//                     onKeyPress={(e) => {\r\n//                         if (e.charCode === 13 && e.ctrlKey) {\r\n//                             props.addTask(newValue);\r\n//                             setNewValue('')\r\n//                         }\r\n//                     }}\r\n//                 />\r\n//                 <button onClick={() => {\r\n//                     if (newValue === '') {\r\n//                         setError('Enter information')\r\n//                         return;\r\n//                     }\r\n//                     props.addTask(newValue.trim());\r\n//                     setNewValue('')\r\n//                 }\r\n//                 }>Add\r\n//                 </button>\r\n//                 {error && <div className='error-message'>{error}</div>}\r\n//             </div>\r\n//\r\n//\r\n//             <ul>\r\n//                 {\r\n//                     props.taska.map(t =>\r\n//                         <li key={t.id}>\r\n//                             <input\r\n//                                 type='checkbox'\r\n//                                 checked={t.isDone}\r\n//                                 onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n//                                     props.changeChecked(t.id, e.currentTarget.checked)\r\n//                                 }\r\n//                                 }\r\n//\r\n//\r\n//                             />\r\n//                             <span>{t.title}</span>\r\n//                             <button onClick={() => {\r\n//                                 props.delTask(t.id)\r\n//                             }}>del\r\n//                             </button>\r\n//                         </li>)\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'All' ? 'active-filter' : ''}\r\n//                     onClick={() => {\r\n//                         props.changeTask('All')\r\n//                     }}>All\r\n//                 </button>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'Complete' ? 'active-filter' : '' }\r\n//                     onClick={() => {\r\n//                         props.changeTask('Complete')\r\n//                     }}>Complete\r\n//                 </button>\r\n//                 <button\r\n//                     className={ props.filterTasks === 'Active' ? 'active-filter' : ''}\r\n//                     onClick={() => {\r\n//                         props.changeTask('Active')\r\n//                     }}>Active\r\n//                 </button>\r\n//             </div>\r\n//\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport {v1} from \"uuid\";\r\nimport {TasksArr, Todolist} from './Todolist'\r\nimport {clearLine} from \"readline\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    IconButton,\r\n    LinearProgress,\r\n    Typography,\r\n    Toolbar,\r\n    Container,\r\n    Grid,\r\n    Paper\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilteredTask = 'All' | 'Completed' | 'Active'\r\n\r\nexport type TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilteredTask\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksArr>\r\n}\r\n\r\nfunction App() {\r\n\r\n    function addTask(value: string, tlId: string) {\r\n        let newTask = {id: v1(), title: value, isDone: true};\r\n        let todoListTask = tasksObj[tlId];\r\n        let newTodo = [newTask, ...todoListTask];\r\n        tasksObj[tlId] = newTodo\r\n        setTasks({...tasksObj})\r\n\r\n    }\r\n\r\n    function changeChecked(id: string, isDone: boolean, tlId: string) {\r\n        let todoListTask = tasksObj[tlId];\r\n        let newTask = todoListTask.find(t => t.id === id)\r\n        if (newTask) {\r\n            newTask.isDone = isDone;\r\n            setTasks({...tasksObj})\r\n        }\r\n    }\r\n\r\n    function changeTask(value: FilteredTask, tlId: string) {\r\n        let findTodolist = todoLists.find(tl => tl.id === tlId)\r\n        if (findTodolist) {\r\n            findTodolist.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function delTask(id: string, tlId: string) {\r\n        let tasks = tasksObj[tlId]\r\n        let filterTask = tasks.filter(t => t.id !== id)\r\n        tasksObj[tlId] = filterTask;\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n\r\n\r\n    const todoList1 = v1()\r\n    const todoList2 = v1()\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n        {id: todoList1, title: 'What to learn', filter: 'All'},\r\n        {id: todoList2, title: 'What to buy', filter: 'All'}\r\n    ])\r\n    let [tasksObj, setTasks] = useState<TasksStateType>({\r\n        [todoList1]: [\r\n            {id: v1(), title: 'Buy bread', isDone: true},\r\n            {id: v1(), title: 'Buy milk', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false}\r\n        ],\r\n        [todoList2]: [\r\n            {id: v1(), title: 'Buy bread', isDone: true},\r\n            {id: v1(), title: 'Buy milk', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false}\r\n        ]\r\n    });\r\n\r\n    function removeTodoList(id: string) {\r\n        let filterTodoList = todoLists.filter(tl => tl.id !== id)\r\n        todoLists = filterTodoList\r\n        setTodoLists([...todoLists])\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodoListsType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: 'All'\r\n        }\r\n        setTodoLists([todolist, ...todoLists])\r\n        setTasks({\r\n            ...tasksObj,\r\n            [todolist.id]: []\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, tlId: string) {\r\n        let todoListTask = tasksObj[tlId];\r\n        let newTask = todoListTask.find(t => t.id === id)\r\n        if (newTask) {\r\n            newTask.title = newTitle;\r\n            setTasks({...tasksObj})\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(tlId: string, title: string) {\r\n        let newTodolist = todoLists.find(tl => tl.id === tlId)\r\n        if (newTodolist) {\r\n            newTodolist.title = title\r\n        }\r\n        setTodoLists([...todoLists])\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <Container fixed>\r\n                <AppBar position='static'>\r\n                    <Toolbar>\r\n                        <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant='h6'>\r\n                            News\r\n                        </Typography>\r\n                        <Button color='inherit'>Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Grid container style = { {padding:'20px'} } >\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let tasksForTodolist = tasksObj[tl.id]\r\n                            if (tl.filter === 'Completed') {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n                            }\r\n                            if (tl.filter === 'Active') {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper style={ { padding: '20px' } }\r\n                                           elevation={7}\r\n                                    >\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            tlId={tl.id}\r\n                                            changeChecked={changeChecked}\r\n                                            addTask={addTask}\r\n                                            changeTask={changeTask}\r\n                                            delTask={delTask}\r\n                                            title={tl.title}\r\n                                            taska={tasksForTodolist}\r\n                                            filterTasks={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////  Todolist 8\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksArr, Todolist} from './Todolist'\r\n// import {clearLine} from \"readline\";\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n// import {\r\n//     AppBar,\r\n//     Button,\r\n//     IconButton,\r\n//     LinearProgress,\r\n//     Typography,\r\n//     Toolbar,\r\n//     Container,\r\n//     Grid,\r\n//     Paper\r\n// } from \"@material-ui/core\";\r\n// import {Menu} from \"@material-ui/icons\";\r\n//\r\n// export type FilteredTask = 'All' | 'Completed' | 'Active'\r\n//\r\n// export type TodoListsType = {\r\n//     id: string,\r\n//     title: string,\r\n//     filter: FilteredTask\r\n// }\r\n//\r\n// function App() {\r\n//\r\n//     function addTask(value: string, tlId: string) {\r\n//         let newTask = {id: v1(), title: value, isDone: true};\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTodo = [newTask, ...todoListTask];\r\n//         tasksObj[tlId] = newTodo\r\n//         setTasks({...tasksObj})\r\n//\r\n//     }\r\n//\r\n//     function changeChecked(id: string, isDone: boolean, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find(t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.isDone = isDone;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//     function changeTask(value: FilteredTask, tlId: string) {\r\n//         let findTodolist = todoLists.find(tl => tl.id === tlId)\r\n//         if (findTodolist) {\r\n//             findTodolist.filter = value\r\n//             setTodoLists([...todoLists])\r\n//         }\r\n//     }\r\n//\r\n//     function delTask(id: string, tlId: string) {\r\n//         let tasks = tasksObj[tlId]\r\n//         let filterTask = tasks.filter(t => t.id !== id)\r\n//         tasksObj[tlId] = filterTask;\r\n//         setTasks({...tasksObj})\r\n//     }\r\n//\r\n//     type TasksStateType = {\r\n//         [key: string]: Array<TasksArr>\r\n//     }\r\n//\r\n//     const todoList1 = v1()\r\n//     const todoList2 = v1()\r\n//\r\n//     let [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n//         {id: todoList1, title: 'What to learn', filter: 'All'},\r\n//         {id: todoList2, title: 'What to buy', filter: 'All'}\r\n//     ])\r\n//     let [tasksObj, setTasks] = useState<TasksStateType>({\r\n//         [todoList1]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false},\r\n//             {id: v1(), title: 'Rest API', isDone: false}\r\n//         ],\r\n//         [todoList2]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false}\r\n//         ]\r\n//     });\r\n//\r\n//     function removeTodoList(id: string) {\r\n//         let filterTodoList = todoLists.filter(tl => tl.id !== id)\r\n//         todoLists = filterTodoList\r\n//         setTodoLists([...todoLists])\r\n//     }\r\n//\r\n//     function addTodolist(title: string) {\r\n//         let todolist: TodoListsType = {\r\n//             id: v1(),\r\n//             title: title,\r\n//             filter: 'All'\r\n//         }\r\n//         setTodoLists([todolist, ...todoLists])\r\n//         setTasks({\r\n//             ...tasksObj,\r\n//             [todolist.id]: []\r\n//         })\r\n//     }\r\n//\r\n//     function changeTaskTitle(id: string, newTitle: string, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find(t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.title = newTitle;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//     function changeTodoListTitle(tlId: string, title: string) {\r\n//         let newTodolist = todoLists.find(tl => tl.id === tlId)\r\n//         if (newTodolist) {\r\n//             newTodolist.title = title\r\n//         }\r\n//         setTodoLists([...todoLists])\r\n//     }\r\n//\r\n//     return (\r\n//         <div className='App'>\r\n//             <Container fixed>\r\n//                 <AppBar position='static'>\r\n//                     <Toolbar>\r\n//                         <IconButton edge='start' color='inherit' aria-label='menu'>\r\n//                             <Menu/>\r\n//                         </IconButton>\r\n//                         <Typography variant='h6'>\r\n//                             News\r\n//                         </Typography>\r\n//                         <Button color='inherit'>Login</Button>\r\n//                     </Toolbar>\r\n//                 </AppBar>\r\n//                 <Grid container style = { {padding:'20px'} } >\r\n//                     <AddItemForm addItem={addTodolist}/>\r\n//                 </Grid>\r\n//                 <Grid container spacing={5}>\r\n//                     {\r\n//                         todoLists.map(tl => {\r\n//                             let tasksForTodolist = tasksObj[tl.id]\r\n//                             if (tl.filter === 'Completed') {\r\n//                                 tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n//                             }\r\n//                             if (tl.filter === 'Active') {\r\n//                                 tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n//                             }\r\n//\r\n//                             return (\r\n//                                 <Grid item>\r\n//                                     <Paper style={ { padding: '20px' } }\r\n//                                            elevation={7}\r\n//                                     >\r\n//                                         <Todolist\r\n//                                             key={tl.id}\r\n//                                             tlId={tl.id}\r\n//                                             changeChecked={changeChecked}\r\n//                                             addTask={addTask}\r\n//                                             changeTask={changeTask}\r\n//                                             delTask={delTask}\r\n//                                             title={tl.title}\r\n//                                             taska={tasksForTodolist}\r\n//                                             filterTasks={tl.filter}\r\n//                                             removeTodoList={removeTodoList}\r\n//                                             changeTaskTitle={changeTaskTitle}\r\n//                                             changeTodoListTitle={changeTodoListTitle}\r\n//                                         />\r\n//                                     </Paper>\r\n//                                 </Grid>\r\n//                             )\r\n//                         })\r\n//                     }\r\n//                 </Grid>\r\n//             </Container>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default App\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////Task 7\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksArr, Todolist} from './Todolist'\r\n// import {clearLine} from \"readline\";\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n// import {\r\n//     AppBar,\r\n//     Button,\r\n//     IconButton,\r\n//     LinearProgress,\r\n//     Typography,\r\n//     Toolbar,\r\n//     Container,\r\n//     Grid,\r\n//     Paper\r\n// } from \"@material-ui/core\";\r\n// import {Menu} from \"@material-ui/icons\";\r\n//\r\n// export type FilteredTask = 'All' | 'Completed' | 'Active'\r\n//\r\n// type TodoLists = {\r\n//     id: string,\r\n//     title: string,\r\n//     filter: FilteredTask\r\n// }\r\n//\r\n// function App() {\r\n//\r\n//     function addTask(value: string, tlId: string) {\r\n//         let newTask = {id: v1(), title: value, isDone: true};\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTodo = [newTask, ...todoListTask];\r\n//         tasksObj[tlId] = newTodo\r\n//         setTasks({...tasksObj})\r\n//\r\n//     }\r\n//\r\n//     function changeChecked(id: string, isDone: boolean, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find(t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.isDone = isDone;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//     function changeTask(value: FilteredTask, tlId: string) {\r\n//         let findTodolist = todoLists.find(tl => tl.id === tlId)\r\n//         if (findTodolist) {\r\n//             findTodolist.filter = value\r\n//             setTodoLists([...todoLists])\r\n//         }\r\n//     }\r\n//\r\n//     function delTask(id: string, tlId: string) {\r\n//         let tasks = tasksObj[tlId]\r\n//         let filterTask = tasks.filter(t => t.id !== id)\r\n//         tasksObj[tlId] = filterTask;\r\n//         setTasks({...tasksObj})\r\n//     }\r\n//\r\n//     type TasksStateType = {\r\n//         [key: string]: Array<TasksArr>\r\n//     }\r\n//\r\n//     const todoList1 = v1()\r\n//     const todoList2 = v1()\r\n//\r\n//     let [todoLists, setTodoLists] = useState<Array<TodoLists>>([\r\n//         {id: todoList1, title: 'What to learn', filter: 'All'},\r\n//         {id: todoList2, title: 'What to buy', filter: 'All'}\r\n//     ])\r\n//     let [tasksObj, setTasks] = useState<TasksStateType>({\r\n//         [todoList1]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false},\r\n//             {id: v1(), title: 'Rest API', isDone: false}\r\n//         ],\r\n//         [todoList2]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false}\r\n//         ]\r\n//     });\r\n//\r\n//     function removeTodoList(id: string) {\r\n//         let filterTodoList = todoLists.filter(tl => tl.id !== id)\r\n//         todoLists = filterTodoList\r\n//         setTodoLists([...todoLists])\r\n//     }\r\n//\r\n//     function addTodolist(title: string) {\r\n//         let todolist: TodoLists = {\r\n//             id: v1(),\r\n//             title: title,\r\n//             filter: 'All'\r\n//         }\r\n//         setTodoLists([todolist, ...todoLists])\r\n//         setTasks({\r\n//             ...tasksObj,\r\n//             [todolist.id]: []\r\n//         })\r\n//     }\r\n//\r\n//     function changeTaskTitle(id: string, newTitle: string, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find(t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.title = newTitle;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//     function changeTodoListTitle(tlId: string, title: string) {\r\n//         let newTodolist = todoLists.find(tl => tl.id === tlId)\r\n//         if (newTodolist) {\r\n//             newTodolist.title = title\r\n//         }\r\n//         setTodoLists([...todoLists])\r\n//     }\r\n//\r\n//     return (\r\n//         <div className='App'>\r\n//             <Container fixed>\r\n//                 <AppBar position='static'>\r\n//                     <Toolbar>\r\n//                         <IconButton edge='start' color='inherit' aria-label='menu'>\r\n//                             <Menu/>\r\n//                         </IconButton>\r\n//                         <Typography variant='h6'>\r\n//                             News\r\n//                         </Typography>\r\n//                         <Button color='inherit'>Login</Button>\r\n//                     </Toolbar>\r\n//                 </AppBar>\r\n//                 <Grid container style = { {padding:'20px'} } >\r\n//                     <AddItemForm addItem={addTodolist}/>\r\n//                 </Grid>\r\n//                 <Grid container spacing={5}>\r\n//                     {\r\n//                         todoLists.map(tl => {\r\n//                             let tasksForTodolist = tasksObj[tl.id]\r\n//                             if (tl.filter === 'Completed') {\r\n//                                 tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n//                             }\r\n//                             if (tl.filter === 'Active') {\r\n//                                 tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n//                             }\r\n//\r\n//                             return (\r\n//                                 <Grid item>\r\n//                                     <Paper style={ { padding: '20px' } }\r\n//                                            elevation={7}\r\n//                                     >\r\n//                                         <Todolist\r\n//                                             key={tl.id}\r\n//                                             tlId={tl.id}\r\n//                                             changeChecked={changeChecked}\r\n//                                             addTask={addTask}\r\n//                                             changeTask={changeTask}\r\n//                                             delTask={delTask}\r\n//                                             title={tl.title}\r\n//                                             taska={tasksForTodolist}\r\n//                                             filterTasks={tl.filter}\r\n//                                             removeTodoList={removeTodoList}\r\n//                                             changeTaskTitle={changeTaskTitle}\r\n//                                             changeTodoListTitle={changeTodoListTitle}\r\n//                                         />\r\n//                                     </Paper>\r\n//                                 </Grid>\r\n//                             )\r\n//                         })\r\n//                     }\r\n//                 </Grid>\r\n//             </Container>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default App\r\n\r\n\r\n////////////////////////////////////////////Task 6 30min\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksArr, Todolist} from './Todolist'\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n//\r\n// export type FilteredTask = 'All' | 'Completed' | 'Active'\r\n//\r\n//\r\n// type TodoListsType = {\r\n//     id: string,\r\n//     title: string,\r\n//     filter: FilteredTask\r\n// }\r\n//\r\n// function App() {\r\n//\r\n//     function addTask(value:string,tlId: string) {\r\n//         let newTask = {id:v1(), title: value, isDone:false};\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTodo = [newTask,...todoListTask];\r\n//         tasksObj[tlId] = newTodo\r\n//         setTasks({...tasksObj})\r\n//\r\n//     }\r\n//\r\n//     function changeChecked(id: string, isDone:boolean, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find( t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.isDone = isDone;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//     function changeTask(value: FilteredTask, tlId: string) {\r\n//         let findTodolist = todoLists.find( tl => tl.id === tlId)\r\n//         if (findTodolist) {\r\n//             findTodolist.filter = value\r\n//             setTodoLists([...todoLists])\r\n//         }}\r\n//\r\n//     function delTask (id: string, tlId: string) {\r\n//         let tasks = tasksObj[tlId]\r\n//         let filterTask = tasks.filter(t => t.id !== id)\r\n//         tasksObj[tlId] = filterTask;\r\n//         setTasks({...tasksObj})\r\n//     }\r\n//\r\n//\r\n//     type taskObjType = {\r\n//         [key: string]: Array<TasksArr>\r\n//     }\r\n//\r\n//     const todoList1 = v1()\r\n//     const todoList2 = v1()\r\n//\r\n//     let [todoLists, setTodoLists] = useState <Array<TodoListsType>>(  [\r\n//         {id: todoList1, title: 'What to learn', filter: 'Active'},\r\n//         {id: todoList2, title: 'What to buy', filter: 'Completed'}\r\n//     ])\r\n//     let [tasksObj, setTasks] = useState <taskObjType>({\r\n//         [todoList1]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false},\r\n//             {id: v1(), title: 'Rest API', isDone: false}\r\n//         ],\r\n//         [todoList2]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false}\r\n//         ]\r\n//     });\r\n//     function addTodoList (title:string) {\r\n//         let newTodoList : TodoListsType = {\r\n//             id: v1(),\r\n//             title: title,\r\n//             filter: 'All'\r\n//         }\r\n//         setTodoLists([newTodoList, ...todoLists])\r\n//         setTasks({...tasksObj, [newTodoList.id]:[]})\r\n//     }\r\n//     return (\r\n//         <div className='App'>\r\n//             {/*<input /><button>+</button>*/}\r\n//             <AddItemForm addItem={addTodoList}/>\r\n//             {\r\n//                 todoLists.map(tl => {\r\n//\r\n//                     let tasksForTodolist = tasksObj[tl.id]\r\n//                     if (tl.filter === 'Completed') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n//                     }\r\n//                     if (tl.filter === ('Active')) {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n//                     }\r\n//\r\n//                     return(  <Todolist\r\n//                         key={tl.id}\r\n//                         tlId={tl.id}\r\n//                         changeChecked={changeChecked}\r\n//                         addTask={addTask}\r\n//                         changeTask={changeTask}\r\n//                         delTask={delTask}\r\n//                         title={tl.title}\r\n//                         taska={tasksForTodolist}\r\n//                         filterTasks={tl.filter}\r\n//                     /> )\r\n//                 })\r\n//             }\r\n//         </div>)\r\n// }\r\n//\r\n// export default App\r\n\r\n\r\n///////////////////////////////////////////////  TASK 6\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksType, Todolist} from './Todolist'\r\n// import {AddItemForm} from \"./AddItemForm\";\r\n//\r\n// export type FilteredTask = 'All' | 'Completed' | 'Active'\r\n//\r\n// type TodoListType = {\r\n//     id: string,\r\n//     title: string,\r\n//     filter: FilteredTask\r\n// }\r\n//\r\n// type TasksStateType = {\r\n//     [key: string] : Array<TasksType>\r\n// }\r\n//\r\n// function App() {\r\n//\r\n//     function addTask(value:string,tlId: string) {\r\n//         let newTask = {id:v1(), title: value, isDone:false};\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTodo = [newTask,...todoListTask];\r\n//         tasksObj[tlId] = newTodo\r\n//         setTasks({...tasksObj})\r\n//\r\n//     }\r\n//\r\n//     function changeStatus(id: string, isDone:boolean, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find( t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.isDone = isDone;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//     function changeTaskTitle(id: string, newTitle: string, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find( t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.title = newTitle;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//\r\n//     function changeTask(value: FilteredTask, tlId: string) {\r\n//         let findTodolist = todoLists.find( tl => tl.id === tlId)\r\n//         if (findTodolist) {\r\n//             findTodolist.filter = value\r\n//             setTodoLists([...todoLists])\r\n//         }}\r\n//\r\n//     function delTask (id: string, tlId: string) {\r\n//         let tasks = tasksObj[tlId]\r\n//         let filterTask = tasks.filter(t => t.id !== id)\r\n//         tasksObj[tlId] = filterTask;\r\n//         setTasks({...tasksObj});\r\n//     }\r\n//\r\n//\r\n//     const todoList1 = v1()\r\n//     const todoList2 = v1()\r\n//\r\n//     let [todoLists, setTodoLists] = useState <Array<TodoListType>>(  [\r\n//         {id: todoList1, title: 'What to learn', filter: 'All'},\r\n//         {id: todoList2, title: 'What to buy', filter: 'All'}\r\n//     ])\r\n//     let [tasksObj, setTasks] = useState<TasksStateType> ({\r\n//         [todoList1]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false},\r\n//             {id: v1(), title: 'Rest API', isDone: false}\r\n//         ],\r\n//         [todoList2]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false}\r\n//         ]\r\n//     });\r\n//     function removeTodoList (id:string) {\r\n//         let filterTodoList = todoLists.filter(tl => tl.id !== id)\r\n//         todoLists = filterTodoList\r\n//         setTodoLists([...todoLists])\r\n//     }\r\n//     function changeTodoListTitle (id: string, newTitle: string) {\r\n//         const findTodoList = todoLists.find (tl => tl.id === id);\r\n//         if (findTodoList) {\r\n//             findTodoList.title = newTitle;\r\n//             setTodoLists([...todoLists])\r\n//         }\r\n//     }\r\n//\r\n//     function addTodoList (title:string) {\r\n//         let newTodoList: TodoListType = {\r\n//             id: v1(),\r\n//             title: title,\r\n//             filter: 'All'\r\n//         }\r\n//         setTodoLists([newTodoList, ...todoLists]);\r\n//         setTasks({\r\n//             ...tasksObj,\r\n//             [newTodoList.id] : []\r\n//         })\r\n//     }\r\n//\r\n//     return (\r\n//         <div className='App'>\r\n//             <AddItemForm addItem={addTodoList}/>\r\n//             {\r\n//                 todoLists.map(tl => {\r\n//\r\n//                     let tasksForTodolist = tasksObj[tl.id]\r\n//                     if (tl.filter === 'Completed') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n//                     }\r\n//                     if (tl.filter === 'Active') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n//                     }\r\n//\r\n//                     return(  <Todolist\r\n//                         key={tl.id}\r\n//                         tlId={tl.id}\r\n//                         changeChecked={changeStatus}\r\n//                         addTask={addTask}\r\n//                         changeTask={changeTask}\r\n//                         changeCheckedTitle={changeTaskTitle}\r\n//                         delTask={delTask}\r\n//                         title={tl.title}\r\n//                         taska={tasksForTodolist}\r\n//                         filterTasks={tl.filter}\r\n//                         removeTodoList={removeTodoList}\r\n//                         changeTodoListTitle={changeTodoListTitle}\r\n//                     /> )\r\n//                 })\r\n//             }\r\n//         </div>)\r\n// }\r\n//\r\n// export default App\r\n\r\n\r\n////////////////////////////////////////////Task 5\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksArr, Todolist} from './Todolist'\r\n// import {clearLine} from \"readline\";\r\n//\r\n// export type FilteredTask = 'All' | 'Completed' | 'Active'\r\n//\r\n// type TodoLists = {\r\n//     id: string,\r\n//     title: string,\r\n//     filter: FilteredTask\r\n// }\r\n//\r\n// function App() {\r\n//\r\n//     function addTask(value:string,tlId: string) {\r\n//         let newTask = {id:v1(), title: value, isDone:true};\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTodo = [newTask,...todoListTask];\r\n//         tasksObj[tlId] = newTodo\r\n//         setTasks({...tasksObj})\r\n//\r\n//     }\r\n//\r\n//     function changeChecked(id: string, isDone:boolean, tlId: string) {\r\n//         let todoListTask = tasksObj[tlId];\r\n//         let newTask = todoListTask.find( t => t.id === id)\r\n//         if (newTask) {\r\n//             newTask.isDone = isDone;\r\n//             setTasks({...tasksObj})\r\n//         }\r\n//     }\r\n//\r\n//     function changeTask(value: FilteredTask, tlId: string) {\r\n//         let findTodolist = todoLists.find( tl => tl.id === tlId)\r\n//         if (findTodolist) {\r\n//             findTodolist.filter = value\r\n//             setTodoLists([...todoLists])\r\n//         }}\r\n//\r\n//     function delTask (id: string, tlId: string) {\r\n//         let tasks = tasksObj[tlId]\r\n//         let filterTask = tasks.filter(t => t.id !== id)\r\n//         tasksObj[tlId] = filterTask;\r\n//         setTasks({...tasksObj})\r\n//     }\r\n//\r\n//\r\n//     const todoList1 = v1()\r\n//     const todoList2 = v1()\r\n//\r\n//     let [todoLists, setTodoLists] = useState <Array<TodoLists>>(  [\r\n//         {id: todoList1, title: 'What to learn', filter: 'Active'},\r\n//         {id: todoList2, title: 'What to buy', filter: 'Completed'}\r\n//     ])\r\n//     let [tasksObj, setTasks] = useState({\r\n//         [todoList1]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false},\r\n//             {id: v1(), title: 'Rest API', isDone: false}\r\n//         ],\r\n//         [todoList2]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false}\r\n//         ]\r\n//     });\r\n//\r\n//     return (\r\n//         <div className='App'>\r\n//             {\r\n//                 todoLists.map(tl => {\r\n//\r\n//                     let tasksForTodolist = tasksObj[tl.id]\r\n//                     if (tl.filter === 'Completed') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n//                     }\r\n//                     if (tl.filter === 'Active') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n//                     }\r\n//\r\n//                     return(  <Todolist\r\n//                         key={tl.id}\r\n//                         tlId={tl.id}\r\n//                         changeChecked={changeChecked}\r\n//                         addTask={addTask}\r\n//                         changeTask={changeTask}\r\n//                         delTask={delTask}\r\n//                         title=\"Hey there, what's up?\"\r\n//                         taska={tasksForTodolist}\r\n//                         filterTasks={tl.filter}\r\n//                     /> )\r\n//                 })\r\n//             }\r\n//         </div>)\r\n// }\r\n//\r\n// export default App\r\n\r\n\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksArr, Todolist} from './Todolist'\r\n//\r\n// export type FilteredTask = 'All' | 'Complete' | 'Active'\r\n// type TodoListType = {\r\n//     id: string\r\n//     title: string\r\n//     filter: FilteredTask\r\n// }\r\n//\r\n// function App() {\r\n//\r\n//\r\n//\r\n//     function delTask(id: string, todoListId:string) {\r\n//         let tasks = tasksObj[todoListId]\r\n//         let task = tasks.filter(t => t.id !== id)\r\n//         tasksObj[todoListId] = task\r\n//         setTasks({...tasksObj})\r\n//     }\r\n//\r\n//     function addTask(value: string) {\r\n//         let newTask = {id: v1(), title: value, isDone: true}\r\n//         setTasks([newTask, ...tasksObj])\r\n//     }\r\n//\r\n//     function changeChecked(id: string, isDone: boolean) {\r\n//         let newTask = tasksObj.find(t => t.id === id)\r\n//         if (newTask)\r\n//             newTask.isDone = isDone\r\n//         setTasks([...tasksObj])\r\n//     }\r\n//\r\n//     function changeTask(value: FilteredTask, todoListId: string) {\r\n//         let todoList = todoLists.find(tl => tl.id === todoListId)\r\n//         if (todoList) {\r\n//             todoList.filter = value;\r\n//             setTodoLists([...todoLists])\r\n//         }\r\n//     }\r\n//     let todoListsId1 = v1()\r\n//     let todoListsId2 = v1()\r\n//\r\n//     let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n//         {id: todoListsId1, title: 'What to learn?', filter: 'Active'},\r\n//         {id: todoListsId2, title: 'What to buy?', filter: 'Complete'}\r\n//     ])\r\n//     let [tasksObj, setTasks] = useState({\r\n//         [todoListsId1]: [\r\n//             {id: v1(), title: 'Buy bread', isDone: true},\r\n//             {id: v1(), title: 'Buy milk', isDone: true},\r\n//             {id: v1(), title: 'ReactJS', isDone: false},\r\n//             {id: v1(), title: 'Rest API', isDone: false},\r\n//             {id: v1(), title: 'GraphQL', isDone: false}\r\n//         ],\r\n//         [todoListsId2]: [\r\n//             {id: v1(), title: 'Book', isDone: true},\r\n//             {id: v1(), title: 'Milk', isDone: true}\r\n//         ]\r\n//     })\r\n//\r\n//     return (\r\n//         <div className='App'>\r\n//             {\r\n//                 todoLists.map((tl) => {\r\n//                     let tasksForTodolist = tasksObj[tl.id]\r\n//                     if (tl.filter === 'Complete') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n//                     }\r\n//                     if (tl.filter === 'Active') {\r\n//                         tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n//                     }\r\n//\r\n//                     return <Todolist\r\n//                         key={tl.id}\r\n//                         id={tl.id}\r\n//                         changeChecked={changeChecked}\r\n//                         addTask={addTask}\r\n//                         changeTask={changeTask}\r\n//                         delTask={delTask}\r\n//                         title={tl.title}\r\n//                         taska={tasksForTodolist}\r\n//                         filterTasks={tl.filter}\r\n//                     />\r\n//                 })\r\n//             }\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default App\r\n\r\n\r\n/////////////////////////////////////////////Task 4\r\n// import React, {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n// import {TasksArr, Todolist} from './Todolist'\r\n//\r\n// export type FilteredTask = 'All' | 'Complete' | 'Active'\r\n//\r\n// function App() {\r\n//\r\n//     let [tasks, setTasks] = useState<TasksArr[]>([\r\n//         {id: v1(), title: 'Buy bread', isDone: true},\r\n//         {id: v1(), title: 'Buy milk', isDone: true},\r\n//         {id: v1(), title: 'ReactJS', isDone: false},\r\n//         {id: v1(), title: 'Rest API', isDone: false},\r\n//         {id: v1(), title: 'GraphQL', isDone: false}\r\n//     ])\r\n//     let [filterTasks, setFilterTasks] = useState<FilteredTask>('All')\r\n//\r\n//     let tasksForTodolist = tasks\r\n//     if (filterTasks === 'Complete') {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === false)\r\n//     }\r\n//     if (filterTasks === 'Active') {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === true)\r\n//     }\r\n//\r\n//     function changeTask(value: FilteredTask) {\r\n//         setFilterTasks(value)\r\n//     }\r\n//     function delTask(id: string) {\r\n//         let task = tasks.filter(t => t.id !== id)\r\n//\r\n//         setTasks(task)\r\n//     }\r\n//     function addTask(value:string) {\r\n//         let newTask = {id:v1(), title: value, isDone:true}\r\n//         setTasks([newTask,...tasks])\r\n//     }\r\n//\r\n//     function changeChecked(id: string, isDone:boolean) {\r\n//         let newTask = tasks.find( t => t.id === id)\r\n//         if (newTask)\r\n//             newTask.isDone = isDone\r\n//         setTasks([...tasks])\r\n//     }\r\n//\r\n//     return (\r\n//         <Todolist\r\n//             changeChecked={changeChecked}\r\n//             addTask={addTask}\r\n//             changeTask={changeTask}\r\n//             delTask={delTask}\r\n//             title=\"Hey there, what's up?\"\r\n//             taska={tasksForTodolist}\r\n//             filterTasks={filterTasks}\r\n//         />\r\n//\r\n//     )\r\n// }\r\n//\r\n// export default App\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}